// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: video_converter.proto

package video_converter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName       string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileEncoding   string `protobuf:"bytes,2,opt,name=file_encoding,json=fileEncoding,proto3" json:"file_encoding,omitempty"`
	OutputEncoding string `protobuf:"bytes,3,opt,name=output_encoding,json=outputEncoding,proto3" json:"output_encoding,omitempty"`
	VideoId        int64  `protobuf:"varint,4,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *VideoInfo) Reset() {
	*x = VideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_converter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoInfo) ProtoMessage() {}

func (x *VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_converter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoInfo.ProtoReflect.Descriptor instead.
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return file_video_converter_proto_rawDescGZIP(), []int{0}
}

func (x *VideoInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VideoInfo) GetFileEncoding() string {
	if x != nil {
		return x.FileEncoding
	}
	return ""
}

func (x *VideoInfo) GetOutputEncoding() string {
	if x != nil {
		return x.OutputEncoding
	}
	return ""
}

func (x *VideoInfo) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

type VideoToConvert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoInfo  *VideoInfo `protobuf:"bytes,1,opt,name=video_info,json=videoInfo,proto3" json:"video_info,omitempty"`
	ChunkIndex int32      `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	LastChuck  bool       `protobuf:"varint,3,opt,name=last_chuck,json=lastChuck,proto3" json:"last_chuck,omitempty"`
	VideoFeed  []byte     `protobuf:"bytes,4,opt,name=video_feed,json=videoFeed,proto3" json:"video_feed,omitempty"`
}

func (x *VideoToConvert) Reset() {
	*x = VideoToConvert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_converter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoToConvert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoToConvert) ProtoMessage() {}

func (x *VideoToConvert) ProtoReflect() protoreflect.Message {
	mi := &file_video_converter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoToConvert.ProtoReflect.Descriptor instead.
func (*VideoToConvert) Descriptor() ([]byte, []int) {
	return file_video_converter_proto_rawDescGZIP(), []int{1}
}

func (x *VideoToConvert) GetVideoInfo() *VideoInfo {
	if x != nil {
		return x.VideoInfo
	}
	return nil
}

func (x *VideoToConvert) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *VideoToConvert) GetLastChuck() bool {
	if x != nil {
		return x.LastChuck
	}
	return false
}

func (x *VideoToConvert) GetVideoFeed() []byte {
	if x != nil {
		return x.VideoFeed
	}
	return nil
}

type ConvertedVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoFeed []byte  `protobuf:"bytes,1,opt,name=video_feed,json=videoFeed,proto3,oneof" json:"video_feed,omitempty"`
	Sucess    bool    `protobuf:"varint,2,opt,name=sucess,proto3" json:"sucess,omitempty"`
	Error     *string `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *ConvertedVideo) Reset() {
	*x = ConvertedVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_converter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertedVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertedVideo) ProtoMessage() {}

func (x *ConvertedVideo) ProtoReflect() protoreflect.Message {
	mi := &file_video_converter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertedVideo.ProtoReflect.Descriptor instead.
func (*ConvertedVideo) Descriptor() ([]byte, []int) {
	return file_video_converter_proto_rawDescGZIP(), []int{2}
}

func (x *ConvertedVideo) GetVideoFeed() []byte {
	if x != nil {
		return x.VideoFeed
	}
	return nil
}

func (x *ConvertedVideo) GetSucess() bool {
	if x != nil {
		return x.Sucess
	}
	return false
}

func (x *ConvertedVideo) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

var File_video_converter_proto protoreflect.FileDescriptor

var file_video_converter_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x22, 0x0a, 0x0a, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x46, 0x0a, 0x0e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0f, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x1a, 0x0f,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x31, 0x33, 0x6e, 0x34, 0x2f, 0x67, 0x6f, 0x2d, 0x66, 0x66, 0x6d, 0x70, 0x65,
	0x67, 0x2d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2d, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_converter_proto_rawDescOnce sync.Once
	file_video_converter_proto_rawDescData = file_video_converter_proto_rawDesc
)

func file_video_converter_proto_rawDescGZIP() []byte {
	file_video_converter_proto_rawDescOnce.Do(func() {
		file_video_converter_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_converter_proto_rawDescData)
	})
	return file_video_converter_proto_rawDescData
}

var file_video_converter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_video_converter_proto_goTypes = []interface{}{
	(*VideoInfo)(nil),      // 0: VideoInfo
	(*VideoToConvert)(nil), // 1: VideoToConvert
	(*ConvertedVideo)(nil), // 2: ConvertedVideo
}
var file_video_converter_proto_depIdxs = []int32{
	0, // 0: VideoToConvert.video_info:type_name -> VideoInfo
	1, // 1: VideoConverter.ConvertVideo:input_type -> VideoToConvert
	2, // 2: VideoConverter.ConvertVideo:output_type -> ConvertedVideo
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_video_converter_proto_init() }
func file_video_converter_proto_init() {
	if File_video_converter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_converter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_converter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoToConvert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_converter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertedVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_converter_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_converter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_converter_proto_goTypes,
		DependencyIndexes: file_video_converter_proto_depIdxs,
		MessageInfos:      file_video_converter_proto_msgTypes,
	}.Build()
	File_video_converter_proto = out.File
	file_video_converter_proto_rawDesc = nil
	file_video_converter_proto_goTypes = nil
	file_video_converter_proto_depIdxs = nil
}
