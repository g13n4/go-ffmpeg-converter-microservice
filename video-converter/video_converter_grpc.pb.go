// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: video_converter.proto

package video_converter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoConverterClient is the client API for VideoConverter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoConverterClient interface {
	ConvertVideo(ctx context.Context, opts ...grpc.CallOption) (VideoConverter_ConvertVideoClient, error)
}

type videoConverterClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoConverterClient(cc grpc.ClientConnInterface) VideoConverterClient {
	return &videoConverterClient{cc}
}

func (c *videoConverterClient) ConvertVideo(ctx context.Context, opts ...grpc.CallOption) (VideoConverter_ConvertVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoConverter_ServiceDesc.Streams[0], "/VideoConverter/ConvertVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoConverterConvertVideoClient{stream}
	return x, nil
}

type VideoConverter_ConvertVideoClient interface {
	Send(*VideoToConvert) error
	Recv() (*ConvertedVideo, error)
	grpc.ClientStream
}

type videoConverterConvertVideoClient struct {
	grpc.ClientStream
}

func (x *videoConverterConvertVideoClient) Send(m *VideoToConvert) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoConverterConvertVideoClient) Recv() (*ConvertedVideo, error) {
	m := new(ConvertedVideo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoConverterServer is the server API for VideoConverter service.
// All implementations must embed UnimplementedVideoConverterServer
// for forward compatibility
type VideoConverterServer interface {
	ConvertVideo(VideoConverter_ConvertVideoServer) error
	mustEmbedUnimplementedVideoConverterServer()
}

// UnimplementedVideoConverterServer must be embedded to have forward compatible implementations.
type UnimplementedVideoConverterServer struct {
}

func (UnimplementedVideoConverterServer) ConvertVideo(VideoConverter_ConvertVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertVideo not implemented")
}
func (UnimplementedVideoConverterServer) mustEmbedUnimplementedVideoConverterServer() {}

// UnsafeVideoConverterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoConverterServer will
// result in compilation errors.
type UnsafeVideoConverterServer interface {
	mustEmbedUnimplementedVideoConverterServer()
}

func RegisterVideoConverterServer(s grpc.ServiceRegistrar, srv VideoConverterServer) {
	s.RegisterService(&VideoConverter_ServiceDesc, srv)
}

func _VideoConverter_ConvertVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoConverterServer).ConvertVideo(&videoConverterConvertVideoServer{stream})
}

type VideoConverter_ConvertVideoServer interface {
	Send(*ConvertedVideo) error
	Recv() (*VideoToConvert, error)
	grpc.ServerStream
}

type videoConverterConvertVideoServer struct {
	grpc.ServerStream
}

func (x *videoConverterConvertVideoServer) Send(m *ConvertedVideo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoConverterConvertVideoServer) Recv() (*VideoToConvert, error) {
	m := new(VideoToConvert)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoConverter_ServiceDesc is the grpc.ServiceDesc for VideoConverter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoConverter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoConverter",
	HandlerType: (*VideoConverterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertVideo",
			Handler:       _VideoConverter_ConvertVideo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "video_converter.proto",
}
